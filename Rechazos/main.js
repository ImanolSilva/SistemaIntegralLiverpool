/*****************************************************
 * ========== CONFIGURACIÓN DE FIREBASE ==========
 *****************************************************/
const firebaseConfig = { apiKey: "AIzaSyA_4H46I7TCVLnFjet8fQPZ006latm-mRE", authDomain: "loginliverpool.firebaseapp.com", projectId: "loginliverpool", storageBucket: "loginliverpool.appspot.com", messagingSenderId: "704223815941", appId: "1:704223815941:web:c871525230fb61caf96f6c", measurementId: "G-QFEPQ4TSPY" };
if (!firebase.apps.length) { firebase.initializeApp(firebaseConfig); }
const storage = firebase.app().storage("gs://loginliverpool.firebasestorage.app");
const db = firebase.firestore();
const auth = firebase.auth();

/*****************************************************
 * ========== VARIABLES GLOBALES ==========
 *****************************************************/
const AppState = { relacionesData: null, usuariosData: [], allRechazosEnExcel: [], rechazosGlobal: [], selectedFileData: null, isAdmin: false, fileVersion: "1" };
let isSaving = false;
let adminBossFilter = "";
const ADMIN_UIDS = ["doxhVo1D3aYQqqkqgRgfJ4qcKcU2", "OaieQ6cGi7TnW0nbxvlk2oyLaER2", "jYhYVprQWkNO7ZP2tF8B222Il6f1", "KnbBtaMqEgQ2sXwZTuKPgcxfD5G3", "9Votnc6ZeYWgrQfSr2eQzC0ZdH82", "GL9JK2L8ZlhxNMOElhVuGvQlcmM2", "6IdpyY2fbSPwiA13mtqTp0HOjMm2"];
const autoSaveTimers = {};

/*****************************************************
 * ========== FUNCIONES AUXILIARES Y DE LÓGICA ==========
 *****************************************************/
function showAlert(icon, title, text = '', config = {}) { const defaultConfig = { toast: true, position: "top-end", showConfirmButton: false, timer: 3000, timerProgressBar: true, didOpen: (toast) => { toast.addEventListener('mouseenter', Swal.stopTimer); toast.addEventListener('mouseleave', Swal.resumeTimer); } }; return Swal.fire({ icon, title, text, ...defaultConfig, ...config }); }
function setUIForRole(isAdmin) { const dropzone = document.getElementById("dropzone"); if (dropzone) dropzone.classList.toggle("hidden", !isAdmin); }
function fixEncoding(str) { if (!str) return ""; try { return decodeURIComponent(escape(str)); } catch { return str; } }
function isMobile() { return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent); }
function parseExcelDate(value) { if (!value) return ""; if (typeof value === "number") { const dateObj = new Date(Math.round((value - 25569) * 86400 * 1000)); return dateObj.toLocaleDateString('es-ES', { day: '2-digit', month: 'long', year: 'numeric' }); } const parsed = Date.parse(value); if (!isNaN(parsed)) { const dateObj = new Date(parsed); return dateObj.toLocaleDateString('es-ES', { day: '2-digit', month: 'long', year: 'numeric' }); } return value; }
function showSection(sectionId) { const section = document.getElementById(sectionId); if (section) { section.classList.remove('hidden'); setTimeout(() => section.classList.add('visible'), 50); } }
function loadDynamicImage(sku, seccion, containerId) { const container = document.getElementById(containerId); if (!container) return; container.innerHTML = `<div class="img-placeholder d-flex align-items-center justify-content-center" style="height: 150px;"><div class="spinner-border text-secondary" role="status"><span class="visually-hidden">Cargando...</span></div></div>`; const imageUrl = `https://ss${seccion}.liverpool.com.mx/xl/${sku}.jpg`; const fallbackImageHTML = `<div class="img-placeholder d-flex align-items-center justify-content-center" style="height: 150px;"><i class="bi bi-image-alt fs-1 text-muted"></i></div>`; const img = new Image(); img.src = imageUrl; img.className = "img-fluid rounded"; img.style.maxHeight = "200px"; img.onload = () => { container.innerHTML = ''; container.appendChild(img); }; img.onerror = () => { container.innerHTML = fallbackImageHTML; }; }
async function loadStaticExcelFiles() { try { const [userResponse, relResponse] = await Promise.all([fetch("../ArchivosExcel/Usuarios.xlsx"), fetch("../ArchivosExcel/relaciones.xlsx")]); if (!userResponse.ok) throw new Error("No se encontró Usuarios.xlsx"); const userBlob = await userResponse.blob(); const userData = await userBlob.arrayBuffer(); const userWorkbook = XLSX.read(userData, { type: "array" }); const userSheet = userWorkbook.Sheets["Usuarios"]; if (userSheet) AppState.usuariosData = XLSX.utils.sheet_to_json(userSheet, { defval: "" }); if (!relResponse.ok) throw new Error("No se encontró relaciones.xlsx"); const relBlob = await relResponse.blob(); const relData = await relBlob.arrayBuffer(); const relWorkbook = XLSX.read(relData, { type: "array" }); const relSheet = relWorkbook.Sheets["Usuarios"]; if (relSheet) AppState.relacionesData = XLSX.utils.sheet_to_json(relSheet); } catch (error) { console.error("Error al cargar archivos estáticos:", error); showAlert("error", "Error Crítico", "No se pudieron cargar los archivos de configuración."); } }
document.addEventListener("DOMContentLoaded", () => { const preloader = document.querySelector('.preloader'); auth.onAuthStateChanged(async (user) => { if (user) { document.getElementById("correoUsuario").innerHTML = `<i class="bi bi-person-check-fill me-2"></i>${user.email}`; AppState.isAdmin = ADMIN_UIDS.includes(user.uid); setUIForRole(AppState.isAdmin); await loadStaticExcelFiles(); await loadFilesFromFirebase(); showSection('file-selection-section'); } else { window.location.href = "../Login/login.html"; } preloader.classList.add('hidden'); }); setupEventListeners(); });
function setupEventListeners() { document.getElementById("logout-btn").addEventListener("click", () => { auth.signOut().then(() => window.location.href = "../Login/login.html"); }); document.getElementById("confirmFileSelection").addEventListener("click", () => { if (AppState.selectedFileData) { showAlert("success", "Archivo Confirmado", `Cargando reportes de: ${AppState.selectedFileData.name}`); document.getElementById("file-selection-section").style.display = "none"; loadRechazosFileBasedOnRole(); showSection('tools-section'); showSection('content-section'); } else { showAlert("warning", "Atención", "Debes seleccionar un archivo antes de continuar."); } }); document.getElementById("saveCommentsBtn").addEventListener("click", () => saveAllComments(false)); const dropzone = document.getElementById("dropzone"); if (dropzone) { const handleFileSelect = (file) => { if (file) { checkExistingFile().then(exists => { if (exists) { showAlert("warning", "Archivo existente", "Ya hay un archivo cargado. Elimina el actual para subir uno nuevo."); } else { handleFileUpload(file); } }); } }; dropzone.addEventListener("click", () => { if (!AppState.isAdmin) return; const fileInput = document.createElement("input"); fileInput.type = "file"; fileInput.accept = ".xlsx, .xls"; fileInput.onchange = (e) => handleFileSelect(e.target.files[0]); fileInput.click(); }); dropzone.addEventListener("dragover", (e) => { e.preventDefault(); e.currentTarget.classList.add("dropzone-dragover"); }); dropzone.addEventListener("dragleave", (e) => e.currentTarget.classList.remove("dropzone-dragover")); dropzone.addEventListener("drop", (e) => { e.preventDefault(); e.currentTarget.classList.remove("dropzone-dragover"); if (AppState.isAdmin) handleFileSelect(e.dataTransfer.files[0]); }); } document.addEventListener("click", (e) => { const target = e.target.closest("[data-action]"); if (!target) return; const action = target.dataset.action; const rowIndex = target.dataset.rowIndex; if (action === "choose-photo") { choosePhoto(rowIndex); } else if (action === "delete-photo") { deletePhoto(rowIndex); } }); document.addEventListener("input", (e) => { if (e.target.classList.contains("comentario-input")) { const rowIndex = e.target.dataset.rowIndex; const newComment = e.target.value; if (AppState.rechazosGlobal[rowIndex]) { AppState.rechazosGlobal[rowIndex].Comentarios = newComment; } const hasComment = newComment.trim() !== ""; e.target.classList.toggle("has-comment", hasComment); const indicator = document.querySelector(`#heading-${rowIndex} .state-indicator`); if(indicator) indicator.classList.toggle("has-comment", hasComment); if (autoSaveTimers[rowIndex]) clearTimeout(autoSaveTimers[rowIndex]); autoSaveTimers[rowIndex] = setTimeout(() => autoSaveComment(rowIndex), 1500); } }); }
async function checkExistingFile() { const storageRef = storage.ref("uploads"); const fileList = await storageRef.listAll(); return fileList.items.some(item => item.name.toLowerCase() === "rechazos.xlsx"); }
async function loadFilesFromFirebase() { try { const storageRef = storage.ref("uploads"); const fileList = await storageRef.listAll(); const files = fileList.items.filter(item => item.name.toLowerCase() === "rechazos.xlsx").map(item => ({ name: item.name, ref: item })); if (files.length > 0) { renderFileSelectOptions(files); if (AppState.isAdmin) renderFilesManagement(files); const metadata = await files[0].ref.getMetadata(); AppState.fileVersion = (metadata.customMetadata && metadata.customMetadata.version) || "1"; } else { showAlert("warning", "Sin archivo", "No se encontró 'rechazos.xlsx'. Un administrador debe subirlo."); } } catch (error) { console.error("Error al listar archivos de Firebase:", error); showAlert("error", "Error de Red", "No se pudo conectar con Firebase para cargar archivos."); } }
function renderFileSelectOptions(files) { const container = document.getElementById("fileListContainer"); container.innerHTML = files.map(file => `<div class="card file-card mb-2" style="transition: all 0.3s ease;"><div class="card-body d-flex justify-content-between align-items-center p-3"><div><i class="bi bi-file-earmark-excel-fill me-2 text-success fs-4"></i><span class="fw-bold">${file.name}</span></div><button class="btn btn-sm btn-pill btn-select"><i class="bi bi-check-lg"></i> Seleccionar</button></div></div>`).join(''); container.querySelectorAll('.btn-select').forEach((button, index) => { button.addEventListener('click', () => { AppState.selectedFileData = files[index]; document.getElementById("selectedFileFeedback").textContent = `Archivo seleccionado: ${files[index].name}`; document.getElementById("confirmFileSelection").disabled = false; container.querySelectorAll('.card').forEach(card => { card.style.borderColor = ''; card.style.boxShadow = ''; }); const selectedCard = button.closest('.card'); selectedCard.style.borderColor = 'var(--rosa-principal)'; selectedCard.style.boxShadow = '0 0 15px rgba(230, 0, 126, 0.3)'; }); }); }

// ========= ¡AQUÍ ESTÁ LA MAGIA! ESTA FUNCIÓN FUE COMPLETAMENTE REESCRITA =========
async function renderFilesManagement(files) {
    if (!files.length) return;
    const container = document.getElementById("filesManagementContainer");
    const file = files[0];
    const metadata = await file.ref.getMetadata().catch(() => ({}));
    const version = (metadata.customMetadata && metadata.customMetadata.version) || "N/A";

    container.innerHTML = `
        <div class="file-management-card">
            <div class="d-flex justify-content-between align-items-start mb-3">
                <div>
                    <h5 class="mb-1 text-dark"><i class="bi bi-file-earmark-excel-fill me-2 text-success"></i>${file.name}</h5>
                    <span class="badge bg-secondary">Versión: ${version}</span>
                </div>
            </div>
            <p class="text-muted small">Acciones de administrador para el archivo de trabajo principal.</p>
            <div class="d-flex justify-content-start gap-2 flex-wrap">
                <button class="btn btn-pill btn-download" id="adminDownloadBtn"><i class="bi bi-download"></i> Descargar</button>
                <button class="btn btn-pill btn-email" id="adminEmailBtn"><i class="bi bi-envelope"></i> Enviar</button>
                <button class="btn btn-pill btn-delete" id="adminDeleteBtn"><i class="bi bi-trash"></i> Eliminar</button>
            </div>
        </div>`;

    document.getElementById('adminDownloadBtn').addEventListener('click', async () => {
        const url = await file.ref.getDownloadURL();
        const link = document.createElement("a");
        link.href = url;
        link.download = file.name;
        link.click();
    });

    document.getElementById('adminEmailBtn').addEventListener('click', sendFileByEmail);
    
    document.getElementById('adminDeleteBtn').addEventListener('click', async () => {
        const { isConfirmed } = await Swal.fire({
            title: '¿Estás seguro de eliminar?',
            text: `El archivo "${file.name}" se borrará permanentemente.`,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#e53935',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Sí, eliminar ahora',
            cancelButtonText: 'Cancelar'
        });
        if (isConfirmed) {
            Swal.fire({ title: 'Eliminando...', allowOutsideClick: false, didOpen: () => Swal.showLoading() });
            try {
                await file.ref.delete();
                showAlert("success", "Eliminado", "El archivo ha sido eliminado.");
                setTimeout(() => location.reload(), 1500);
            } catch (error) {
                showAlert("error", "Error", "No se pudo eliminar el archivo.");
            }
        }
    });
}

async function handleFileUpload(file) { const { isConfirmed } = await Swal.fire({ title: '¿Subir este archivo?', text: `Se cargará "${file.name}" como el nuevo archivo de rechazos.`, icon: 'question', showCancelButton: true, confirmButtonText: 'Sí, subir', }); if (isConfirmed) { const fileRef = storage.ref("uploads/rechazos.xlsx"); const uploadTask = fileRef.put(file, { customMetadata: { version: "1" } }); Swal.fire({ title: 'Subiendo archivo...', html: `<div class="progress"><div id="upload-progress-bar" class="progress-bar progress-bar-striped progress-bar-animated bg-success" role="progressbar" style="width: 0%"></div></div>`, allowOutsideClick: false, showConfirmButton: false, }); uploadTask.on('state_changed', (snapshot) => { const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100; document.getElementById('upload-progress-bar').style.width = progress + '%'; }, (error) => { Swal.close(); showAlert("error", "Error de subida", error.message); }, () => { Swal.close(); showAlert("success", "Éxito", "Archivo subido correctamente."); setTimeout(() => location.reload(), 1500); }); } }
function choosePhoto(rowIndex) { const fileInput = document.createElement('input'); fileInput.type = 'file'; fileInput.accept = 'image/*'; if (isMobile()) { fileInput.capture = 'environment'; } fileInput.onchange = (e) => { const file = e.target.files[0]; if (file) uploadPhoto(file, rowIndex); }; fileInput.click(); }
async function uploadPhoto(file, rowIndex) { const remision = AppState.rechazosGlobal[rowIndex].Remisión || "sinRemision"; const filename = `uploads/evidencias/evidencia_${remision}_${Date.now()}.jpg`; const storageRef = storage.ref(filename); Swal.fire({ title: "Subiendo foto...", allowOutsideClick: false, didOpen: () => Swal.showLoading() }); try { const snapshot = await storageRef.put(file); const downloadURL = await snapshot.ref.getDownloadURL(); AppState.rechazosGlobal[rowIndex].Fotos = downloadURL; updatePhotoPreview(rowIndex, downloadURL); Swal.close(); showAlert("success", "Foto guardada", "La evidencia se ha guardado."); await saveAllComments(true); } catch (error) { Swal.close(); showAlert("error", "Error", "No se pudo subir la foto."); } }
function updatePhotoPreview(rowIndex, url) { const previewContainer = document.getElementById(`evidencia-preview-${rowIndex}`); if (!previewContainer) return; if (url) { previewContainer.innerHTML = `<a href="${url}" target="_blank"><img src="${url}?t=${Date.now()}" alt="Evidencia" class="img-fluid rounded mb-2" style="max-height:150px;"></a><div class="d-flex gap-2 justify-content-center photo-buttons"><button class="btn btn-pill btn-photo" data-action="choose-photo" data-row-index="${rowIndex}"><i class="bi bi-camera"></i> Cambiar</button><button class="btn btn-pill btn-delete" data-action="delete-photo" data-row-index="${rowIndex}"><i class="bi bi-trash"></i></button></div>`; } else { previewContainer.innerHTML = `<div class="photo-buttons"><button class="btn btn-pill btn-photo" data-action="choose-photo" data-row-index="${rowIndex}"><i class="bi bi-camera-fill"></i> Agregar Foto</button></div>`; } }
async function deletePhoto(rowIndex) { const photoUrl = AppState.rechazosGlobal[rowIndex].Fotos; if (!photoUrl) return; try { const photoRef = storage.refFromURL(photoUrl); await photoRef.delete(); } catch (error) { if (error.code !== 'storage/object-not-found') { showAlert("error", "Error", "No se pudo eliminar la foto de la base de datos."); return; } } AppState.rechazosGlobal[rowIndex].Fotos = ""; updatePhotoPreview(rowIndex, ""); showAlert("success", "Foto eliminada", "La evidencia ha sido eliminada."); await saveAllComments(true); }
async function loadRechazosFileBasedOnRole() { if (!AppState.relacionesData) { return showAlert("error", "Error de datos", "No se pudo cargar la información de relaciones de usuario."); } let secciones = []; if (!AppState.isAdmin) { const correoUsuario = auth.currentUser.email; const usuarioData = AppState.relacionesData.filter(row => row.Correo === correoUsuario); if (usuarioData.length === 0) { return showAlert("error", "Acceso denegado", "No se encontró información para este usuario."); } usuarioData.forEach(row => { for (const key in row) { if (key.toLowerCase().includes('sección') && row[key]) { secciones = secciones.concat(row[key].toString().split(',').map(s => s.trim())); } } }); secciones = [...new Set(secciones.filter(Boolean))]; } loadRechazosFile(secciones); }
async function loadRechazosFile(secciones) { try { const archivoRechazosRef = AppState.selectedFileData?.ref; if (!archivoRechazosRef) throw new Error("No se ha seleccionado un archivo de rechazos."); const url = await archivoRechazosRef.getDownloadURL(); const response = await fetch(url); const blob = await response.blob(); const data = await blob.arrayBuffer(); const workbook = XLSX.read(data, { type: "array" }); const sheet = workbook.Sheets["Rechazos"]; if (!sheet) return showAlert("error", "Error de Formato", "No existe la hoja 'Rechazos' en el Excel."); AppState.allRechazosEnExcel = XLSX.utils.sheet_to_json(sheet, { defval: "" }); let rechazosFiltrados = AppState.allRechazosEnExcel; if (AppState.isAdmin) { renderBossFilter(rechazosFiltrados); if (adminBossFilter) { rechazosFiltrados = rechazosFiltrados.filter(row => fixEncoding(row["Jefatura"]) === adminBossFilter); } } else if (secciones.length > 0) { rechazosFiltrados = rechazosFiltrados.filter(row => row.Sección && secciones.includes(row.Sección.toString().trim())); } renderRechazos(rechazosFiltrados); } catch (error) { console.error("Error al cargar rechazos.xlsx:", error); showAlert("error", "Error de Carga", "No se pudo procesar el archivo 'rechazos.xlsx'."); } }
function renderBossFilter(allRechazos) { const container = document.getElementById("bossFilterContainer"); const jefesUnicos = [...new Set(allRechazos.map(r => fixEncoding(r["Jefatura"])).filter(Boolean))]; container.innerHTML = `<select class="form-select" id="bossFilterSelect"><option value="">Filtrar por Jefatura...</option>${jefesUnicos.map(j => `<option value="${j}">${j}</option>`).join('')}</select>`; const select = document.getElementById('bossFilterSelect'); select.value = adminBossFilter; select.addEventListener("change", (e) => { adminBossFilter = e.target.value; const filtrados = adminBossFilter ? AppState.allRechazosEnExcel.filter(row => fixEncoding(row["Jefatura"]) === adminBossFilter) : AppState.allRechazosEnExcel; renderRechazos(filtrados); }); }
async function autoSaveComment(rowIndex) { const button = document.querySelector(`#heading-${rowIndex} button`); if (!button) return; let spinner = button.querySelector(".saving-spinner"); if (!spinner) { spinner = document.createElement("span"); spinner.className = "spinner-border spinner-border-sm text-success ms-2"; spinner.setAttribute("role", "status"); button.appendChild(spinner); } try { await saveAllComments(true); } catch (error) { console.error(`Error en auto-guardado para fila ${rowIndex}:`, error); } finally { spinner.remove(); } }
async function sendFileByEmail() { if (!AppState.selectedFileData?.ref) { return showAlert("error", "Error", "No hay un archivo seleccionado."); } const fileUrl = await AppState.selectedFileData.ref.getDownloadURL(); const subject = encodeURIComponent("Archivo de Rechazos - Liverpool"); const body = encodeURIComponent(`Hola,\n\nSe comparte el enlace de descarga para el archivo de rechazos actualizado:\n\n${fileUrl}\n\nSaludos.`); window.location.href = `mailto:?subject=${subject}&body=${body}`; }
async function saveAllComments(silent = false) { if (isSaving) return; isSaving = true; if (!silent) { Swal.fire({ title: "Guardando cambios...", allowOutsideClick: false, didOpen: () => Swal.showLoading() }); } try { const fileRef = AppState.selectedFileData?.ref; if (!fileRef) throw new Error("No hay un archivo de referencia seleccionado."); const metadata = await fileRef.getMetadata(); const serverVersion = (metadata.customMetadata && metadata.customMetadata.version) || "1"; if (serverVersion !== AppState.fileVersion) { throw new Error("Conflicto de versiones. El archivo ha sido modificado por otro usuario. Por favor, recarga la página."); } const url = await fileRef.getDownloadURL(); const response = await fetch(url); const data = await response.arrayBuffer(); const workbook = XLSX.read(data, { type: "array" }); const sheet = workbook.Sheets["Rechazos"]; if (!sheet) throw new Error("La hoja 'Rechazos' no fue encontrada en el archivo Excel."); let excelData = XLSX.utils.sheet_to_json(sheet, { defval: "" }); const updatesMap = new Map(); AppState.rechazosGlobal.forEach(fila => { if (fila.Remisión) { updatesMap.set(fila.Remisión.toString(), { Comentarios: fila.Comentarios || "", Fotos: fila.Fotos || "" }); } }); let hasChanges = false; excelData = excelData.map(row => { const remision = row.Remisión?.toString(); if (remision && updatesMap.has(remision)) { const updates = updatesMap.get(remision); if (row.Comentarios !== updates.Comentarios || row.Fotos !== updates.Fotos) { hasChanges = true; row.Comentarios = updates.Comentarios; row.Fotos = updates.Fotos; } } return row; }); if (!hasChanges) { if (!silent) Swal.close(); console.log("No hay cambios que guardar."); isSaving = false; return; } const newSheet = XLSX.utils.json_to_sheet(excelData); workbook.Sheets["Rechazos"] = newSheet; const wbout = XLSX.write(workbook, { bookType: "xlsx", type: "array" }); const newBlob = new Blob([wbout], { type: "application/octet-stream" }); const newVersion = (parseInt(serverVersion) + 1).toString(); await fileRef.put(newBlob, { customMetadata: { version: newVersion } }); AppState.fileVersion = newVersion; if (!silent) { showAlert("success", "Guardado", "Los cambios se han guardado correctamente."); } console.log("Cambios guardados exitosamente. Nueva versión:", newVersion); } catch (error) { console.error("Error al guardar comentarios:", error); if (!silent) { showAlert("error", "Error al Guardar", error.message); } } finally { isSaving = false; if (!silent && Swal.isVisible()) { Swal.close(); } } }
function renderRechazos(rechazosData) { const container = document.getElementById("rechazosContainer"); AppState.rechazosGlobal = rechazosData.map((item, index) => ({ ...item, _rowIndex: index, Comentarios: item.Comentarios || "", Fotos: item.Fotos || "" })); if (!AppState.rechazosGlobal.length) { container.innerHTML = `<div class="alert alert-info text-center"><i class="bi bi-info-circle-fill"></i> No hay reportes que coincidan con tu filtro actual.</div>`; return; } container.innerHTML = `<div class="accordion" id="rechazosAccordion">${AppState.rechazosGlobal.map(renderRechazoItem).join('')}</div>`; AppState.rechazosGlobal.forEach((rechazo, i) => { loadDynamicImage(rechazo.Sku, rechazo.Sección, `imgContainer-${rechazo.Sku}-${i}`); updatePhotoPreview(rechazo._rowIndex, rechazo.Fotos); }); }
function renderRechazoItem(rechazo, i) { const { _rowIndex, Remisión, Sku, Sección } = rechazo; const fecha = parseExcelDate(rechazo["Fecha y Hora Rechazo"]) || "N/A"; const descripcionSku = fixEncoding(rechazo["Descripción Sku"]) || "N/A"; const piezas = fixEncoding(rechazo.Piezas) || "N/A"; const jefatura = fixEncoding(rechazo.Jefatura) || "N/A"; const usuarioRechazo = fixEncoding(rechazo["Usuario de Rechazo"]) || "N/A"; const user = AppState.usuariosData.find(u => u.Usuarios && u.Usuarios.toString().trim().toLowerCase() === usuarioRechazo.toLowerCase()); const usuarioName = user?.Nombre || usuarioRechazo; const hasComment = (rechazo.Comentarios || "").trim() !== ""; return ` <div class="accordion-item"> <h2 class="accordion-header" id="heading-${_rowIndex}"> <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-${_rowIndex}"> <div class="d-flex justify-content-between align-items-center w-100 gap-3"> <div class="badge-reporte"> ${Remisión} </div> <div class="report-summary-info flex-grow-1"> <div class="sku" title="${descripcionSku}">${descripcionSku}</div> <div class="usuario"><i class="bi bi-person"></i> ${usuarioName}</div> </div> <div class="state-indicator ${hasComment ? 'has-comment' : ''}" title="${hasComment ? 'Tiene comentarios' : 'Sin comentarios'}"></div> </div> </button> </h2> <div id="collapse-${_rowIndex}" class="accordion-collapse collapse" data-bs-parent="#rechazosAccordion"> <div class="accordion-body"> <div class="row g-4"> <div class="col-lg-7"> <h5 class="mb-3">Detalles del Rechazo</h5> <div class="report-details-grid"> <div class="detail-item"><i class="bi bi-upc-scan"></i><div class="detail-item-content"><small>SKU</small><span>${Sku}</span></div></div> <div class="detail-item"><i class="bi bi-box-seam"></i><div class="detail-item-content"><small>Piezas</small><span>${piezas}</span></div></div> <div class="detail-item"><i class="bi bi-calendar-event"></i><div class="detail-item-content"><small>Fecha</small><span>${fecha}</span></div></div> <div class="detail-item"><i class="bi bi-tag-fill"></i><div class="detail-item-content"><small>Sección</small><span>${Sección}</span></div></div> <div class="detail-item"><i class="bi bi-person-workspace"></i><div class="detail-item-content"><small>Jefatura</small><span>${jefatura}</span></div></div> </div> <div class="mt-4"> <label for="comentario-${_rowIndex}" class="form-label fw-semibold"><i class="bi bi-chat-left-dots-fill"></i> Comentarios:</label> <textarea id="comentario-${_rowIndex}" rows="4" class="form-control comentario-input" data-row-index="${_rowIndex}">${rechazo.Comentarios}</textarea> </div> </div> <div class="col-lg-5"> <div class="text-center p-3 rounded" style="background-color: #fff; border: 1px solid #eee; height: 100%;"> <h6 class="mb-3"><i class="bi bi-card-image"></i> Evidencia</h6> <div id="imgContainer-${Sku}-${i}" class="mb-3"></div> <div id="evidencia-preview-${_rowIndex}"> </div> </div> </div> </div> </div> </div> </div>`; }